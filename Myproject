<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
    <meta charset="utf-8">
    <style>
      html, body {
        font-family: 'Wallpoet', cursive;
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 100%;
      }
.controls {
  margin-top: 10px;
  border: 1px solid transparent;
  border-radius: 2px 0 0 2px;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  height: 32px;
  outline: none;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}
#pac-input {
  background-color: #22f06a;
  font-family: 'Wallpoet', cursive;
  font-size: 15px;
  font-weight: 300;
  margin-left: 12px;
  padding: 0 11px 0 13px;
  text-overflow: ellipsis;
  width: 300px;
}
#pac-input:focus {
  border-color: #22f06a;
}
.pac-container {
  font-family: 'Wallpoet', cursive;
}
#type-selector {
 
  color: #22f06a;
  background-color: #22f06a;
  padding: 5px 11px 0px 11px;
}
#type-selector label {
  font-family: 'Wallpoet', cursive;
  font-size: 13px;
  font-weight: 300;
}
</style>

    <title>Places Searchbox</title>
    <style>
      #target {
        width: 345px;
      }
    </style>
  </head>
  <body>
       
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <script>
// This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.
function initAutocomplete() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: 40.7127, lng: -74.0059},
    zoom: 13,
    scrollwheel: false,
    styles: styleArray,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });
  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });
  var markers = [];
  // [START region_getplaces]
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();
    if (places.length == 0) {
      return;
    }
    // Clear out the old markers.
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];
    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };
      // Create a marker for each place.
    markers.push(new google.maps.Marker({
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }));
$.each(markers, function(key, val) {
                console.log(places);
                var contentString = "<div>"+places[key].name+"</div><div>"+places[key] .formatted_address+ "</div><img src=\"" +places[key] .icon+ "\"/></div><div>" +places[key] .types+"</div>";
                // create a info window (to be displayed if a user clicks on a marker)
                var infowindow = new google.maps.InfoWindow({
                    content: contentString,
                    maxHight: 50
                });
                
                // add a click our marker
                val.addListener('click', function() {
                    infowindow.open(map, val);
                });
              });
      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
  // [END region_getplaces]
}
 var styleArray = [
    {
      featureType: "all",
      stylers: [
       { saturation: -50 },
        { lightness: -50 },
        { gamma: 1.25 }
      ]
    },{
      featureType: "road.arterial",
      elementType: "geometry",
      stylers: [
        { hue: "#af1e38" },
        { saturation: 50 }
      ]
    },{
      featureType: "poi.business",
      elementType: "labels",
      stylers: [
        { visibility: "off" }
      ]
    }
  ];
    
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB3wZ5tvteUMFgokmfMt6aQppVHuoNZp4w&libraries=places&callback=initAutocomplete"
    https://maps.googleapis.com/maps/api/place/autocomplete/json?input=NewYork&types=geocode&key=AIzaSyDSnRSHetMm0fgnV9uI7vqsL6rdnidtq98
         async defer></script>
  </body>
</html>
